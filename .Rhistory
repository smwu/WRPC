quant_ub <- 1 - quant_lb
if (!is.null(res$estimates_adjust)) {
estimates <- res$estimates_adjust
}
else {
estimates <- res$estimates
}
terms <- labels(stats::terms(stats::as.formula(res$data_vars$glm_form)))
if (length(terms) > 0) {
full_glm_form <- paste0("y_all ~ ", paste0("c_all * ",
terms, collapse = " + "))
}
else {
full_glm_form <- paste0("y_all ~ c_all")
}
full_data <- data.frame(c_all = as.factor(res$estimates$c_all),
y_all = res$data_vars$y_all, res$data_vars$V_data)
model_matrix <- model.matrix(as.formula(full_glm_form),
data = full_data)
beta <- as.data.frame(matrix(NA, nrow = ncol(model_matrix),
ncol = 5))
beta[, 1] <- colnames(model_matrix)
if (is(res, "wolca")) {
if (ci_level != res$data_vars$ci_level) {
stop("ci_level must match the specified ci_level in the wolca() function")
}
colnames(beta) <- c("Covariate", "Estimate", "LB", "UB",
"p-value")
beta[, c(2, 5)] <- res$estimates_svyglm$fit_summary$coefficients[,
c(1, 4)]
beta[, 2] <- format(round(beta[, 2], digits), digits)
beta[, 3] <- format(round(convert_mix_to_ref(res$estimates_svyglm$xi_est_lb),
digits), digits)
beta[, 4] <- format(round(convert_mix_to_ref(res$estimates_svyglm$xi_est_ub),
digits), digits)
beta[, 5] <- ifelse(beta[, 5] < 10^(-digits),
paste0("<", 10^(-digits)),
format(round(beta[, 5], digits), digits))
}
else {
est_xi <- estimates$xi_med
est_lb <- apply(estimates$xi_red, c(2, 3),
function(x) stats::quantile(x, quant_lb))
est_ub <- apply(estimates$xi_red, c(2, 3),
function(x) stats::quantile(x, quant_ub))
est_red <- estimates$xi_red
K <- nrow(est_xi)
Q <- ncol(est_xi)
colnames(beta) <- c("Covariate", "Estimate", "LB", "UB",
"P(xi > 0)")
beta[1, -1] <- c(est_xi[1, 1],
get_ci(post_samp = est_red[, 1, 1]),
get_prob_pos(est_red[, 1, 1]))
### CHANGED
if (K > 1) {
for (i in 2:K) {
beta[i, -1] <- c(stats::median(est_red[, i, 1] - est_red[, 1, 1]),
get_ci(est_red[, i, 1] - est_red[, 1, 1], digits = digits),
get_prob_pos(est_red[, i, 1] - est_red[, 1, 1], digits = digits))
}
}
if (Q > 1) {
for (i in 2:Q) {
beta[K + (i - 1), -1] <- c(est_xi[1, i],
get_ci(est_red[, 1, i]),
get_prob_pos(est_red[, 1, i]))
}
for (i in 2:Q) {
for (j in 2:K) {
beta[Q + (i - 1) * (K - 1) + (j - 1), -1] <-
c(stats::median(est_red[, j, i] - est_red[, 1, i]),
get_ci(est_red[, j, i] - est_red[, 1, i], digits = digits),
get_prob_pos(est_red[, j, i] - est_red[, 1, i], digits = digits))
}
}
}
### END CHANGED
beta$Estimate <- as.numeric(beta$Estimate)
beta$LB <- as.numeric(beta$LB)
beta$UB <- as.numeric(beta$UB)
}
beta <- dplyr::mutate_if(beta, is.numeric, round, digits = digits)
beta
}
convert_to_probs <- function (est_xi, glm_form, V_data, cov_name = NULL) {
### CHANGED
if (!is.null(cov_name)) {
if (!all(sapply(cov_name, function(x) grepl(x, glm_form)))) {
stop("all variables in cov_name must be specified in glm_form")
}
else if (!all(sapply(cov_name, function(x) x %in% colnames(V_data)))) {
stop("all variables in cov_name must be found in V_data")
}
}
### END CHANGED
if (grepl("c_all", glm_form)) {
stop("glm_form must not contain the latent class variable c_all")
}
K <- nrow(est_xi)
### CHANGED
# Case with no covariates
if (is.null(cov_name)) {
Phi_df <- as.data.frame(t(stats::pnorm(est_xi)))
# all_Phi_df <- as.data.frame(sapply(1:K, function(k)
#   stats::pnorm(est_xi[k, ])))
colnames(Phi_df) <- paste0("Class", 1:K)
# Phi_df <- Phi_df[1:num_cov_levels, ]
} else { # Case with additional covariates
cov_names <- labels(stats::terms(stats::as.formula(glm_form)))
oth_names <- cov_names[cov_names != cov_name]
cov_levels <- lapply(cov_name, function(x) levels(V_data[[x]]))
num_cov_levels <- nrow(expand.grid(cov_levels))
oth_levels <- lapply(oth_names, function(x) levels(V_data[[x]]))
all_levels <- append(cov_levels, oth_levels)
all_level_comb <- expand.grid(all_levels)
colnames(all_level_comb) <- c(cov_name, oth_names)
all_model_mat <- stats::model.matrix(stats::as.formula(glm_form),
all_level_comb)
all_Phi_df <- as.data.frame(sapply(1:K, function(k) stats::pnorm(all_model_mat %*%
est_xi[k, ])))
colnames(all_Phi_df) <- paste0("Class", 1:K)
colnames(all_level_comb)[1:length(cov_name)] <- paste0("Cov",
1:length(cov_name))
Phi_df <- cbind(all_Phi_df, all_level_comb)
Phi_df <- Phi_df[1:num_cov_levels, ]
}
### END CHANGED
return(Phi_df)
}
plot_outcome_probs <- function (res, cov_name = NULL, ci_level = 0.95, add_lines = FALSE,
cov_labels = NULL, class_labels = NULL, class_title = "Dietary Pattern",
x_title = NULL, y_title = "Probability of Outcome", ...) {
if (!(class(res) %in% c("swolca", "wolca"))) {
stop("res must be an object of class `swolca` or `wolca`, resulting \n         from a call to one of these functions")
}
if (!is.null(ci_level)) {
if (!(ci_level > 0 & ci_level < 1)) {
stop("ci_level must be between 0 and 1")
}
quant_lb <- (1 - ci_level)/2
quant_ub <- 1 - quant_lb
}
### CHANGED
if (!is.null(cov_name)) {
if (!(length(cov_name) %in% c(1, 2)) | !(is.character(cov_name[[1]]))) {
stop("cov_name must be `NULL` or a string vector of length 1 or 2")
}
}
if (!is.null(cov_labels)) {
if (!is.list(cov_labels)) {
cov_labels <- list(cov_labels)
}
if (!(length(cov_labels) %in% c(1, 2)) | !(is.character(cov_labels[[1]]))) {
print(cov_labels)
stop("cov_labels must be a list of length 1 or 2 composed of string vectors")
}
else if (length(cov_name) != length(cov_labels)) {
stop(paste0("cov_name is a vector of length ", length(cov_name),
", while cov_labels is a list of length ", length(cov_labels),
". The two must be of the same length."))
}
}
### END CHANGED
if (is(res, "wolca")) {
if (is.null(res$estimates_svyglm)) {
stop("wolca object does not have regression estimates. Please run wolca_svyglm().")
}
estimates <- res$estimates_svyglm
est_xi <- estimates$xi_est
if (!is.null(ci_level)) {
if (ci_level != res$data_vars$ci_level) {
stop("ci_level must match the specified ci_level in the wolca() function")
}
est_lb <- estimates$xi_est_lb
est_ub <- estimates$xi_est_ub
}
} else {
if (!is.null(res$estimates_adjust)) {
estimates <- res$estimates_adjust
}
else {
estimates <- res$estimates
}
est_xi <- estimates$xi_med
if (!is.null(ci_level)) {
est_lb <- apply(estimates$xi_red, c(2, 3), function(x) stats::quantile(x,
quant_lb))
est_ub <- apply(estimates$xi_red, c(2, 3), function(x) stats::quantile(x,
quant_ub))
}
}
K <- nrow(est_xi)
Phi_df <- convert_to_probs(est_xi = est_xi, glm_form = res$data_vars$glm_form,
V_data = res$data_vars$V_data, cov_name = cov_name)
if (!is.null(ci_level)) {
Phi_lb <- convert_to_probs(est_xi = est_lb, glm_form = res$data_vars$glm_form,
V_data = res$data_vars$V_data, cov_name = cov_name)
Phi_ub <- convert_to_probs(est_xi = est_ub, glm_form = res$data_vars$glm_form,
V_data = res$data_vars$V_data, cov_name = cov_name)
}
Phi_df_long <- Phi_df %>% tidyr::pivot_longer(cols = 1:K,
names_to = "Class", values_to = "Phi")
if (!is.null(ci_level)) {
Phi_lb_long <- Phi_lb %>% tidyr::pivot_longer(cols = 1:K,
names_to = "Class", values_to = "Phi_lb")
Phi_ub_long <- Phi_ub %>% tidyr::pivot_longer(cols = 1:K,
names_to = "Class", values_to = "Phi_ub")
col_names <- colnames(Phi_df_long)[-ncol(Phi_df_long)]
Phi_df_long <- Phi_df_long %>% dplyr::left_join(Phi_lb_long,
by = col_names) %>% dplyr::left_join(Phi_ub_long,
by = col_names)
}
### CHANGED
if (is.null(x_title)) {
if (!is.null(cov_name)) {
x_title <- cov_name[1]
} else {
x_title <- "Classes"
}
}
if (!is.null(cov_name)) {
if (is.null(cov_labels)) {
cov_labels <- lapply(cov_name, function(x) levels(res$data_vars$V_data[[x]]))
}
else {
for (i in 1:length(cov_labels)) {
num_categs <- length(levels(res$data_vars$V_data[[cov_name[i]]]))
if (length(cov_labels[[i]]) != num_categs) {
stop(paste0("length of cov_labels for covariate ",
cov_name[i], " must equal the number of categories: ",
num_categs))
}
}
}
}
### END CHANGED
if (is.null(class_labels)) {
class_labels <- 1:K
} else if (length(class_labels) != K) {
stop(paste0("length of class_labels must equal the number of latent classes, K = ",
K))
}
Class <- Cov1 <- Cov2 <- Phi <- NULL
if (is.null(cov_name)) {
g <- Phi_df_long %>%
ggplot2::ggplot(ggplot2::aes(x = Class, y = Phi, group = Class, col = Class)) +
ggplot2::theme_bw() +
ggplot2::scale_color_brewer(palette = "Set2", labels = class_labels) +
ggplot2::labs(col = class_title, x = x_title, y = y_title) +
ggplot2::geom_point(size = 2, position = ggplot2::position_dodge(width = 0.5)) +
ggplot2::theme(text = ggplot2::element_text(size = 15),
axis.text.x = ggplot2::element_text(size = 10, color = "black"),
axis.text.y = ggplot2::element_text(size = 10, color = "black"),
axis.title.x = ggplot2::element_text(size = 12, color = "black", face = "bold"),
axis.title.y = ggplot2::element_text(size = 12, color = "black", face = "bold"),
legend.title = ggplot2::element_text(size = 12, color = "black"),
legend.text = ggplot2::element_text(size = 11, color = "black"),
legend.position = "top")
} else {
Phi_df_long$Cov1 <- factor(Phi_df_long$Cov1, labels = cov_labels[[1]])
g <- Phi_df_long %>%
ggplot2::ggplot(ggplot2::aes(x = Cov1, y = Phi, group = Class, col = Class)) +
ggplot2::theme_bw() +
ggplot2::scale_color_brewer(palette = "Set2", labels = class_labels) +
ggplot2::labs(col = class_title, x = x_title, y = y_title) +
ggplot2::geom_point(size = 2, position = ggplot2::position_dodge(width = 0.5)) +
ggplot2::theme(text = ggplot2::element_text(size = 15),
axis.text.x = ggplot2::element_text(size = 10, color = "black"),
axis.text.y = ggplot2::element_text(size = 10, color = "black"),
axis.title.x = ggplot2::element_text(size = 12, color = "black", face = "bold"),
axis.title.y = ggplot2::element_text(size = 12, color = "black", face = "bold"),
legend.title = ggplot2::element_text(size = 12, color = "black"),
legend.text = ggplot2::element_text(size = 11, color = "black"),
legend.position = "top")
if (length(cov_name) == 2) {
Phi_df_long$Cov2 <- factor(Phi_df_long$Cov2, labels = cov_labels[[2]])
g <- g + ggplot2::facet_grid(~Cov2)
}
}
if (!is.null(ci_level)) {
g <- g + ggplot2::geom_errorbar(
ggplot2::aes(ymin = Phi_lb, ymax = Phi_ub, col = Class),
width = 0.5, alpha = 0.7, position = ggplot2::position_dodge(width = 0.5))
}
if (add_lines) {
g <- g + ggplot2::geom_line(linewidth = 0.7, alpha = 0.3,
position = ggplot2::position_dodge(width = 0.5))
}
return(g)
}
plot_pattern_probs <- function (res, item_labels = NULL, categ_labels = NULL, categ_title = "Consumption Level",
class_labels = NULL, class_title = "Dietary Pattern", y_title = "Consumption Level Probability",
num_rows = 4,
...) {
if (!(class(res) %in% c("swolca", "wolca"))) {
stop("res must be an object of class `swolca` or `wolca`, resulting \n         from a call to one of these functions")
}
if (!is.null(res$estimates_adjust)) {
est_item_probs <- res$estimates_adjust$theta_med
}
else {
est_item_probs <- res$estimates$theta_med
}
K <- dim(est_item_probs)[2]
if (is.null(item_labels)) {
item_labels <- 1:res$data_vars$J
}
else if (length(item_labels) != res$data_vars$J) {
stop(paste0("length of item_labels must equal the number of exposure items, J = ",
res$data_vars$J))
}
if (is.null(class_labels)) {
class_labels <- 1:K
}
else if (length(class_labels) != K) {
stop(paste0("length of class_labels must equal the number of latent classes, K = ",
K))
}
if (is.null(categ_labels)) {
categ_labels <- 1:res$data_vars$R
}
else if (length(categ_labels) != res$data_vars$R) {
stop(paste0("length of categ_labels must equal the number of exposure categories, R = ",
res$data_vars$R))
}
dimnames(est_item_probs)[[1]] <- item_labels
dimnames(est_item_probs)[[2]] <- class_labels
theta_plot <- data.frame(expand.grid(lapply(dim(est_item_probs), seq_len)),
value = as.vector(est_item_probs))
Item <- Class <- Probability <- Level <- NULL
colnames(theta_plot) <- c("Item", "Class", "Level", "Probability")
theta_plot %>%
ggplot2::ggplot(ggplot2::aes(x = factor(Class, labels = class_labels),
y = Probability, fill = factor(Level))) +
ggplot2::geom_bar(stat = "identity", position = "stack") +
ggplot2::facet_wrap(factor(Item, labels = item_labels) ~ ., nrow = num_rows) +
ggplot2::scale_fill_brewer(type = "seq", palette = "RdYlBu",
direction = -1, name = categ_title, labels = categ_labels) +
ggplot2::theme_bw() + ggplot2::labs(x = class_title, y = y_title) +
ggplot2::theme(panel.grid.major.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(size = 11, color = "black"),
axis.text.y = ggplot2::element_text(size = 11, color = "black"),
axis.title.x = ggplot2::element_text(size = 13, color = "black", face = "bold"),
axis.title.y = ggplot2::element_text(size = 13, color = "black", face = "bold"),
legend.title = ggplot2::element_text(size = 13, color = "black", face = "bold"),
legend.text = ggplot2::element_text(size = 11, color = "black"),
legend.position = "top", strip.text = ggplot2::element_text(size = 9),
strip.background = ggplot2::element_rect(fill = "gray90"))
}
regr_coefs <- get_regr_coefs(res = res_conf_sup)
res <- res_conf_sup
quant_lb <- (1 - ci_level)/2
ci_level <- 0.95
quant_lb <- (1 - ci_level)/2
quant_ub <- 1 - quant_lb
if (!is.null(res$estimates_adjust)) {
estimates <- res$estimates_adjust
}
if (!is.null(res$estimates_adjust)) {
estimates <- res$estimates_adjust
} else {
estimates <- res$estimates
}
terms <- labels(stats::terms(stats::as.formula(res$data_vars$glm_form)))
if (length(terms) > 0) {
full_glm_form <- paste0("y_all ~ ", paste0("c_all * ",
terms, collapse = " + "))
} else {
full_glm_form <- paste0("y_all ~ c_all")
}
full_data <- data.frame(c_all = as.factor(res$estimates$c_all),
y_all = res$data_vars$y_all, res$data_vars$V_data)
model_matrix <- model.matrix(as.formula(full_glm_form),
data = full_data)
beta <- as.data.frame(matrix(NA, nrow = ncol(model_matrix),
ncol = 5))
beta[, 1] <- colnames(model_matrix)
if (is(res, "wolca")) {
if (ci_level != res$data_vars$ci_level) {
stop("ci_level must match the specified ci_level in the wolca() function")
}
colnames(beta) <- c("Covariate", "Estimate", "LB", "UB",
"p-value")
beta[, c(2, 5)] <- res$estimates_svyglm$fit_summary$coefficients[,
c(1, 4)]
beta[, 2] <- format(round(beta[, 2], digits), digits)
beta[, 3] <- format(round(convert_mix_to_ref(res$estimates_svyglm$xi_est_lb),
digits), digits)
beta[, 4] <- format(round(convert_mix_to_ref(res$estimates_svyglm$xi_est_ub),
digits), digits)
beta[, 5] <- ifelse(beta[, 5] < 10^(-digits),
paste0("<", 10^(-digits)),
format(round(beta[, 5], digits), digits))
}
is(res, "wolca")
est_xi <- estimates$xi_med
est_lb <- apply(estimates$xi_red, c(2, 3),
function(x) stats::quantile(x, quant_lb))
dim(estimates$xi_red)
reorder_classes <- function (res, new_order) {
if (!inherits(res, c("swolca", "wolca"))) {
stop("res must be an object of class `swolca` or `wolca`, resulting \n         from a call to one of these functions")
}
else if ((inherits(res, "wolca")) & !is.null(res$estimates_svyglm)) {
warning(paste0("For WOLCA, reordering of classes should be done before ",
"calling wolca_svyglm(). res$estimates_svyglm should be NULL ",
"prior to running this function."))
}
res_new <- res
if (!is.null(res$estimates_adjust)) {
### CHANGED
res_new$estimates_adjust$pi_red <- res$estimates_adjust$pi_red[,
new_order, drop = FALSE]
res_new$estimates_adjust$theta_red <- res$estimates_adjust$theta_red[,
, new_order, , drop = FALSE]
res_new$estimates_adjust$pi_med <- res$estimates_adjust$pi_med[new_order, drop = FALSE]
res_new$estimates_adjust$theta_med <- res$estimates_adjust$theta_med[,
new_order, , drop = FALSE]
### END CHANGED
for (i in 1:5) {
res_new$estimates_adjust$c_all[res$estimates_adjust$c_all ==
new_order[i]] <- i
}
if (is(res, "swolca")) {
### CHANGED
res_new$estimates_adjust$xi_red <- res$estimates_adjust$xi_red[,
new_order, , drop = FALSE]
res_new$estimates_adjust$xi_med <- res$estimates_adjust$xi_med[new_order, , drop = FALSE]
}
}
else {
res_new$estimates$pi_red <- res$estimates$pi_red[, new_order, drop = FALSE]
res_new$estimates$theta_red <- res$estimates$theta_red[,
, new_order, , drop = FALSE]
res_new$estimates$pi_med <- res$estimates$pi_med[new_order, drop = FALSE]
res_new$estimates$theta_med <- res$estimates$theta_med[,
new_order, , drop = FALSE]
for (i in 1:5) {
res_new$estimates$c_all[res$estimates$c_all == new_order[i]] <- i
}
if (is(res, "swolca")) {
res_new$estimates$xi_red <- res$estimates$xi_red[,
new_order, , drop = FALSE]
res_new$estimates$xi_med <- res$estimates$xi_med[new_order, , drop = FALSE]
### END CHANGED
}
}
return(res_new)
}
load("~/Documents/GitHub/WRPC/Results/conf_sup_swolca_results.RData")
res_conf_sup <- res
# Reorder classes
res_conf_sup <- reorder_classes(res = res_conf_sup, new_order = c(2, 1, 3))
regr_coefs <- get_regr_coefs(res = res_conf_sup)
plot_regr_coefs(regr_coefs = regr_coefs, res = res_conf_sup)
plot_outcome_probs(res_conf_sup)
# Reorder classes
res_cmd_sup <- reorder_classes(res = res_cmd_sup, new_order = c(2, 3, 1, 4))
# Use some of the changed functions
plot_pattern_probs(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title, num_rows = 1)
item_labels <- c("BMI", "Hypertension", "Diabetes", "Dyslipidemia", "CKD")
item_labels <- c("BMI", "Hypertension", "Diabetes", "Dyslipidemia")
categ_title <- "Risk Level"
y_title <- "Risk Level Probability"
# Reorder classes
res_cmd_sup <- reorder_classes(res = res_cmd_sup, new_order = c(2, 3, 1, 4))
# Use some of the changed functions
plot_pattern_probs(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title, num_rows = 1)
baysc::plot_pattern_profiles(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title)
baysc::plot_class_dist(res_cmd_sup)
par(mfrow = c(1,1), mar = c(5.1, 4.1, 4.1, 2.1))
plot(res_cmd_sup$post_MCMC_out$dendrogram)
regr_coefs <- get_regr_coefs(res = res_cmd_sup)
plot_regr_coefs(regr_coefs = regr_coefs, res = res_cmd_sup)
plot_outcome_probs(res_cmd_sup)
load("~/Documents/GitHub/WRPC/Results/cmd_sup_no_ckd_swolca_results.RData")
res_cmd_sup <- res
# Reorder classes
res_cmd_sup <- reorder_classes(res = res_cmd_sup, new_order = c(2, 3, 1, 4))
# Use some of the changed functions
plot_pattern_probs(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title, num_rows = 1)
baysc::plot_pattern_profiles(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title)
baysc::plot_class_dist(res_cmd_sup)
par(mfrow = c(1,1), mar = c(5.1, 4.1, 4.1, 2.1))
plot(res_cmd_sup$post_MCMC_out$dendrogram)
regr_coefs <- get_regr_coefs(res = res_cmd_sup)
plot_regr_coefs(regr_coefs = regr_coefs, res = res_cmd_sup)
# Use some of the changed functions
plot_pattern_probs(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title, num_rows = 1)
plot_regr_coefs(regr_coefs = regr_coefs, res = res_cmd_sup)
plot_outcome_probs(res_cmd_sup)
# Use some of the changed functions
plot_pattern_probs(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title, num_rows = 1)
baysc::plot_pattern_profiles(res_cmd_sup, item_labels = item_labels,
categ_title = categ_title, y_title = y_title)
baysc::plot_class_dist(res_cmd_sup)
# Look at grid of confounder and cardiometabolic risk factors
table(res_conf_sup$estimates$c_all, res_cmd_sup$estimates$c_all, useNA = "always")
# By levels of the confounder risk group
round(prop.table(
table(res_cmd_sup$estimates$c_all[res_conf_sup$estimates$c_all == 1])), 2)
round(prop.table(
table(res_cmd_sup$estimates$c_all[res_conf_sup$estimates$c_all == 2])), 2)
round(prop.table(
table(res_cmd_sup$estimates$c_all[res_conf_sup$estimates$c_all == 3])), 2)
